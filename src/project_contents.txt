Project Structure:
main/java/org/example/pionerpixeltest/PionerPixelTestApplication.java
main/java/org/example/pionerpixeltest/api/AuthController.java
main/java/org/example/pionerpixeltest/api/TransferController.java
main/java/org/example/pionerpixeltest/api/UserController.java
main/java/org/example/pionerpixeltest/api/dto/AuthRequest.java
main/java/org/example/pionerpixeltest/api/dto/AuthResponse.java
main/java/org/example/pionerpixeltest/api/dto/EmailUpdateRequest.java
main/java/org/example/pionerpixeltest/api/dto/ErrorResponce.java
main/java/org/example/pionerpixeltest/api/dto/PageResponse.java
main/java/org/example/pionerpixeltest/api/dto/PhoneUpdateRequest.java
main/java/org/example/pionerpixeltest/api/dto/RegisterRequest.java
main/java/org/example/pionerpixeltest/api/dto/TransferRequest.java
main/java/org/example/pionerpixeltest/api/dto/UserDto.java
main/java/org/example/pionerpixeltest/api/mapper/UserMapper.java
main/java/org/example/pionerpixeltest/config/security/JwtAuthFilter.java
main/java/org/example/pionerpixeltest/config/security/JwtTokenProvider.java
main/java/org/example/pionerpixeltest/config/security/SecurityConfig.java
main/java/org/example/pionerpixeltest/config/security/SwaggerConfig.java
main/java/org/example/pionerpixeltest/dao/AccountRepository.java
main/java/org/example/pionerpixeltest/dao/EmailDataRepository.java
main/java/org/example/pionerpixeltest/dao/PhoneDataRepository.java
main/java/org/example/pionerpixeltest/dao/UserRepository.java
main/java/org/example/pionerpixeltest/domain/Account.java
main/java/org/example/pionerpixeltest/domain/EmailData.java
main/java/org/example/pionerpixeltest/domain/PhoneData.java
main/java/org/example/pionerpixeltest/domain/User.java
main/java/org/example/pionerpixeltest/service/AccountService.java
main/java/org/example/pionerpixeltest/service/InitialBalanceHolder.java
main/java/org/example/pionerpixeltest/service/TokenBlacklistService.java
main/java/org/example/pionerpixeltest/service/TransferService.java
main/java/org/example/pionerpixeltest/service/UserFilter.java
main/java/org/example/pionerpixeltest/service/UserService.java
main/java/org/example/pionerpixeltest/service/iml/AccountServiceImpl.java
main/java/org/example/pionerpixeltest/service/iml/BalanceScheduler.java
main/java/org/example/pionerpixeltest/service/iml/CaffeineTokenBlacklistService.java
main/java/org/example/pionerpixeltest/service/iml/CustomUserDetailsService.java
main/java/org/example/pionerpixeltest/service/iml/NoopTokenBlacklistService.java
main/java/org/example/pionerpixeltest/service/iml/TransferServiceImpl.java
main/java/org/example/pionerpixeltest/service/iml/UserServiceImpl.java
main/resources/application.properties
main/resources/application.yaml
main/resources/db/migration/V1_next__account_constraints.sql
main/resources/db/migration/V1__create_tables.sql
main/resources/db/migration/V2__insert_default_users.sql
test/java/org/example/pionerpixeltest/PionerPixelTestApplicationTests.java
test/java/org/example/pionerpixeltest/service/AccountServiceTest.java
test/java/org/example/pionerpixeltest/service/TestSecurityConfig.java
test/java/org/example/pionerpixeltest/service/TransferControllerIntegrationTest.java

File Contents:
PionerPixelTestApplication.java:
```
package org.example.pionerpixeltest;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableScheduling;

@SpringBootApplication
@EnableScheduling
public class PionerPixelTestApplication {

    public static void main(String[] args) {
        SpringApplication.run(PionerPixelTestApplication.class, args);
    }

}

```

AuthController.java:
```
package org.example.pionerpixeltest.api;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.example.pionerpixeltest.api.dto.AuthRequest;
import org.example.pionerpixeltest.api.dto.AuthResponse;
import org.example.pionerpixeltest.api.dto.RegisterRequest;
import org.example.pionerpixeltest.config.security.JwtTokenProvider;
import org.example.pionerpixeltest.service.TokenBlacklistService;
import org.example.pionerpixeltest.service.UserService;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.time.Duration;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
public class AuthController {
    private final AuthenticationManager authenticationManager;
    private final JwtTokenProvider      jwtTokenProvider;
    private final TokenBlacklistService tokenBlacklistService;
    private final UserService userService;

    @PostMapping("/login")
    public ResponseEntity<AuthResponse> login(@Valid @RequestBody AuthRequest req) {

        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(req.getLogin(), req.getPassword()));

        SecurityContextHolder.getContext().setAuthentication(authentication);

        Long userId = Long.parseLong(authentication.getName());

        String token = jwtTokenProvider.generateToken(userId);
        return ResponseEntity.ok(new AuthResponse(token));
    }

    @PostMapping("/logout")
    public ResponseEntity<Void> logout(HttpServletRequest request) {

        String header = request.getHeader(HttpHeaders.AUTHORIZATION);
        if (header != null && header.startsWith("Bearer ")) {

            String token = header.substring(7);

            long ttl = jwtTokenProvider.timeToLive(token);
            tokenBlacklistService.blacklist(token, Duration.ofMillis(ttl));
        }

        SecurityContextHolder.clearContext();
        return ResponseEntity.noContent().build();
    }

    @PostMapping("/register")
    public ResponseEntity<Void> register(@Valid @RequestBody RegisterRequest request) {
        userService.register(request);
        return ResponseEntity.status(HttpStatus.CREATED).build();
    }


}
```

TransferController.java:
```
package org.example.pionerpixeltest.api;

import lombok.RequiredArgsConstructor;
import org.example.pionerpixeltest.api.dto.TransferRequest;
import org.example.pionerpixeltest.service.TransferService;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.User;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/transfer")
public class TransferController {
    private final TransferService transferService;

    @PostMapping("/transfer")
    public ResponseEntity<Void> transfer(@AuthenticationPrincipal User principal,
                                         @RequestBody TransferRequest req) {
        Long fromId = Long.parseLong(String.valueOf(principal.getUsername()));
        transferService.transfer(fromId, req.getToUserId(), req.getAmount());
        return ResponseEntity.noContent().build();
    }


}

```

UserController.java:
```
package org.example.pionerpixeltest.api;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.example.pionerpixeltest.api.dto.UserDto;
import org.example.pionerpixeltest.service.UserFilter;
import org.example.pionerpixeltest.service.UserService;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.Optional;
import java.util.Set;

@RestController
@RequestMapping("/api/users")
@RequiredArgsConstructor
public class UserController {

    private final UserService userService;


    @GetMapping
    public Page<UserDto> search(
            @RequestParam Optional<LocalDate> dobAfter,
            @RequestParam Optional<String> name,
            @RequestParam Optional<String> email,
            @RequestParam Optional<String> phone,
            Pageable pageable) {

        UserFilter filter = new UserFilter(
                dobAfter.orElse(null),
                name.orElse(null),
                email.orElse(null),
                phone.orElse(null));

        return userService.search(filter, pageable);
    }


    @GetMapping("/{id}")
    public UserDto get(@PathVariable Long id) {
        return userService.getById(id);
    }


    @PutMapping("/{id}/emails")
    public ResponseEntity<Void> setEmails(
            @PathVariable Long id,
            @RequestBody @Valid Set<String> emails,
            @AuthenticationPrincipal UserDetails me) {

        userService.updateEmails(id, emails, me);
        return ResponseEntity.noContent().build();
    }


    @PutMapping("/{id}/phones")
    public ResponseEntity<Void> setPhones(
            @PathVariable Long id,
            @RequestBody @Valid Set<String> phones,
            @AuthenticationPrincipal UserDetails me) {

        userService.updatePhones(id, phones, me);
        return ResponseEntity.noContent().build();
    }


}

```

AuthRequest.java:
```
package org.example.pionerpixeltest.api.dto;

import lombok.*;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class AuthRequest {
    private String login;
    private String password;

}

```

AuthResponse.java:
```
package org.example.pionerpixeltest.api.dto;

import lombok.*;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class AuthResponse {
    private String token;
}

```

EmailUpdateRequest.java:
```
package org.example.pionerpixeltest.api.dto;

import lombok.*;

import java.util.Set;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EmailUpdateRequest {
    private Set<String> emails;

}

```

ErrorResponce.java:
```
package org.example.pionerpixeltest.api.dto;

import lombok.*;
import java.time.Instant;


@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ErrorResponce {
    private Instant timestamp;
    private int status;
    private String message;

}

```

PageResponse.java:
```
package org.example.pionerpixeltest.api.dto;

import lombok.*;

import java.util.List;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class PageResponse<T> {
    private List<T> content;
    private int page;
    private int size;
    private long totalElements;

}

```

PhoneUpdateRequest.java:
```
package org.example.pionerpixeltest.api.dto;

import lombok.*;

import java.util.Set;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class PhoneUpdateRequest {
    private Set<String> phones;

}

```

RegisterRequest.java:
```
package org.example.pionerpixeltest.api.dto;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import lombok.Data;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Set;

@Data
public class RegisterRequest {
    @NotBlank
    private String name;

    @NotBlank
    private String password;

    @NotEmpty
    private Set<String> emails;

    @NotEmpty
    private Set<String> phones;

    @NotNull
    private LocalDate dateOfBirth;

    @NotNull
    private BigDecimal initialBalance;


}

```

TransferRequest.java:
```
package org.example.pionerpixeltest.api.dto;

import lombok.*;

import java.math.BigDecimal;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TransferRequest {
    private Long toUserId;
    private BigDecimal amount;

}

```

UserDto.java:
```
package org.example.pionerpixeltest.api.dto;

import lombok.*;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Set;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserDto {

    private Long id;
    private String name;
    private LocalDate dateOfBirth;
    private Set<String> emails;
    private Set<String> phones;
    private BigDecimal balance;

}

```

UserMapper.java:
```
package org.example.pionerpixeltest.api.mapper;

import org.example.pionerpixeltest.api.dto.UserDto;
import org.example.pionerpixeltest.entity.EmailData;
import org.example.pionerpixeltest.entity.PhoneData;
import org.example.pionerpixeltest.entity.User;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

import java.util.Set;
import java.util.stream.Collectors;


@Mapper(componentModel = "spring")
public interface UserMapper {

    @Mapping(source = "account.balance", target = "balance")
    @Mapping(target = "emails", expression = "java(mapEmails(user.getEmails()))")
    @Mapping(target = "phones", expression = "java(mapPhones(user.getPhones()))")
    UserDto toDto(User user);

    @Mapping(target = "id", ignore = true)
    @Mapping(target = "password", ignore = true)
    @Mapping(target = "account", ignore = true)
    @Mapping(target = "emails", expression = "java(toEmailEntities(dto.getEmails()))")
    @Mapping(target = "phones", expression = "java(toPhoneEntities(dto.getPhones()))")
    User toEntity(UserDto dto);

    default Set<String> mapEmails(Set<EmailData> emails) {
        return emails == null ? null : emails.stream()
                .map(EmailData::getEmail)
                .collect(Collectors.toSet());
    }

    default Set<String> mapPhones(Set<PhoneData> phones) {
        return phones == null ? null : phones.stream()
                .map(PhoneData::getPhone)
                .collect(Collectors.toSet());
    }

    default Set<EmailData> toEmailEntities(Set<String> emails) {
        return emails == null ? null : emails.stream().map(email -> {
            EmailData e = new EmailData();
            e.setEmail(email);
            return e;
        }).collect(Collectors.toSet());
    }

    default Set<PhoneData> toPhoneEntities(Set<String> phones) {
        return phones == null ? null : phones.stream().map(phone -> {
            PhoneData p = new PhoneData();
            p.setPhone(phone);
            return p;
        }).collect(Collectors.toSet());
    }

}

```

JwtAuthFilter.java:
```
package org.example.pionerpixeltest.config.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.example.pionerpixeltest.dao.UserRepository;
import org.springframework.http.HttpHeaders;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
@RequiredArgsConstructor
public class JwtAuthFilter extends OncePerRequestFilter {

    private final JwtTokenProvider jwtTokenProvider;
    private final UserRepository userRepository;

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain)
            throws ServletException, IOException {

        String authHeader = request.getHeader(HttpHeaders.AUTHORIZATION);
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            filterChain.doFilter(request, response);
            return;
        }

        String token = authHeader.substring(7);
        Long userId = jwtTokenProvider.getUserId(token);

        if (userId != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            var user = userRepository.findById(userId).orElse(null);

            if (user != null && jwtTokenProvider.validate(token)) {
                User principal = (User) User.withUsername(user.getId().toString())
                        .password(user.getPassword())
                        .authorities("ROLE_USER")
                        .build();

                var auth = new UsernamePasswordAuthenticationToken(
                        principal, null, principal.getAuthorities());
                auth.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

                SecurityContextHolder.getContext().setAuthentication(auth);
            }
        }

        filterChain.doFilter(request, response);
    }
}

```

JwtTokenProvider.java:
```
package org.example.pionerpixeltest.config.security;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.nio.charset.StandardCharsets;
import java.util.Date;

@Component
@RequiredArgsConstructor
public class JwtTokenProvider {
    @Value("${security.jwt.secret}")
    private String secret;

    private static final long EXPIRATION = 86_400_000L;

    private SecretKey key() {
        return Keys.hmacShaKeyFor(secret.getBytes(StandardCharsets.UTF_8));
    }

    public String generateToken(Long userId) {
        Date now     = new Date();
        Date expiry  = new Date(now.getTime() + EXPIRATION);

        return Jwts.builder()
                .setSubject(userId.toString())
                .setIssuedAt(now)
                .setExpiration(expiry)
                .signWith(key(), SignatureAlgorithm.HS256)
                .compact();
    }

    public Long getUserId(String token) {
        String subject = Jwts.parserBuilder()
                .setSigningKey(key())
                .build()
                .parseClaimsJws(token)
                .getBody()
                .getSubject();
        return Long.parseLong(subject);
    }

    public boolean validate(String token) {
        try {
            Jwts.parserBuilder()
                    .setSigningKey(key())
                    .build()
                    .parseClaimsJws(token);
            return true;
        } catch (JwtException | IllegalArgumentException ex) {
            return false;
        }
    }

    public long timeToLive(String token) {
        Date exp = Jwts.parserBuilder()
                .setSigningKey(key())
                .build()
                .parseClaimsJws(token)
                .getBody()
                .getExpiration();
        return Math.max(exp.getTime() - System.currentTimeMillis(), 0);
    }



}

```

SecurityConfig.java:
```
package org.example.pionerpixeltest.config.security;

import lombok.RequiredArgsConstructor;
import org.example.pionerpixeltest.service.iml.CustomUserDetailsService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@RequiredArgsConstructor
@EnableMethodSecurity
public class SecurityConfig {
    private final JwtAuthFilter jwtAuthFilter;
    private final CustomUserDetailsService userDetailsService;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http,
                                                   AuthenticationProvider daoAuthProvider)
            throws Exception {

        return http
                .csrf(AbstractHttpConfigurer::disable)
                .sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers(
                                "/api/auth/**",
                                "/api/auth/register",
                                "/swagger-ui/**",
                                "/swagger-ui.html",
                                "/v3/api-docs/**",
                                "/v3/api-docs.yaml"
                        ).permitAll()
                        .anyRequest().authenticated())
                .authenticationProvider(daoAuthProvider)
                .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class)
                .build();
    }


    @Bean
    public AuthenticationProvider daoAuthProvider(PasswordEncoder passwordEncoder) {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setPasswordEncoder(passwordEncoder);          // ← бин передаётся аргументом
        provider.setUserDetailsService(userDetailsService);
        return provider;
    }


    @Bean                    // стандартный BCrypt удобен и для unit-тестов
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationManager authenticationManager(
            AuthenticationConfiguration configuration) throws Exception {
        return configuration.getAuthenticationManager();
    }

}

```

SwaggerConfig.java:
```
package org.example.pionerpixeltest.config.security;

import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;
import io.swagger.v3.oas.annotations.info.Info;
import io.swagger.v3.oas.annotations.security.*;
import org.springframework.context.annotation.Configuration;

@Configuration
@OpenAPIDefinition(
        info = @Info(title = "PionerPixel API", version = "1.0"),
        security = @SecurityRequirement(name = "bearerAuth")
)
@SecurityScheme(
        name = "bearerAuth",
        type = SecuritySchemeType.HTTP,
        scheme = "bearer",
        bearerFormat = "JWT"
)
public class SwaggerConfig {}

```

AccountRepository.java:
```
package org.example.pionerpixeltest.dao;

import jakarta.persistence.LockModeType;
import org.example.pionerpixeltest.entity.Account;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Lock;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface AccountRepository extends JpaRepository<Account, Long> {
    @Lock(LockModeType.PESSIMISTIC_WRITE)
    @Query("select a from Account a where a.user.id = :userId")
    Optional<Account> findByUserId(@Param("userId") Long userId);

    @Lock(LockModeType.PESSIMISTIC_WRITE)
    @Query("select a from Account a where a.user.id = :userId")
    Optional<Account> findByUserIdForUpdate(@Param("userId") Long userId);

    @Lock(LockModeType.PESSIMISTIC_WRITE)
    @Query("select a from Account a")
    java.util.List<Account> findAllWithLock();
}

```

EmailDataRepository.java:
```
package org.example.pionerpixeltest.dao;

import jakarta.validation.constraints.NotEmpty;
import org.example.pionerpixeltest.entity.EmailData;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;
import java.util.Set;

public interface EmailDataRepository extends JpaRepository<EmailData, Long> {
    boolean existsByEmailIgnoreCase(String email);
    Optional<EmailData> findByEmailIgnoreCase(String email);

    boolean existsByEmailIgnoreCaseIn(@NotEmpty Set<String> emails);
}

```

PhoneDataRepository.java:
```
package org.example.pionerpixeltest.dao;

import jakarta.validation.constraints.NotEmpty;
import org.example.pionerpixeltest.entity.PhoneData;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;
import java.util.Set;

public interface PhoneDataRepository extends JpaRepository<PhoneData, Long> {
    boolean existsByPhone(String phone);
    Optional<PhoneData> findByPhone(String phone);

    boolean existsByPhoneIn(@NotEmpty Set<String> phones);
}

```

UserRepository.java:
```
package org.example.pionerpixeltest.dao;

import org.example.pionerpixeltest.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<User, Long>, JpaSpecificationExecutor<User> {
    Optional<User> findByEmails_EmailIgnoreCase(String email);
    Optional<User> findByPhones_Phone(String phone);

    Optional<User> findByEmails_EmailIgnoreCaseOrPhones_Phone(
            String email, String phone);
}

```

Account.java:
```
package org.example.pionerpixeltest.entity;

import jakarta.persistence.*;
import lombok.*;

import java.math.BigDecimal;

@Getter
@Setter
@Entity
@AllArgsConstructor
@NoArgsConstructor
@Table(name = "account")
public class Account {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false, unique = true)
    private User user;

    @Column(nullable = false, precision = 15, scale = 2)
    private BigDecimal balance;

}

```

EmailData.java:
```
package org.example.pionerpixeltest.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "email_data", uniqueConstraints = @UniqueConstraint(columnNames = "email"))
public class EmailData {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false, length = 200)
    private String email;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    public EmailData(String email) {
        this.email = email;
    }
}

```

PhoneData.java:
```
package org.example.pionerpixeltest.entity;

import jakarta.persistence.*;
import lombok.*;

@Getter
@Setter
@Entity
@Table(name = "phone_data", uniqueConstraints = @UniqueConstraint(columnNames = "phone"))
public class PhoneData {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, length = 13)
    private String phone;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;


}

```

User.java:
```
package org.example.pionerpixeltest.entity;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;

import java.sql.ConnectionBuilder;
import java.time.LocalDate;
import java.util.Set;

@Entity
@Getter
@Setter
@Table(name =  "\"user\"")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, length = 500)
    private String name;

    @Column(nullable = false)
    private LocalDate dateOfBirth;

    @Column(nullable = false, length = 500)
    private String password;

    @OneToOne(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Account account;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    @OnDelete(action = OnDeleteAction.CASCADE)
    private Set<EmailData> emails;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    @OnDelete(action = OnDeleteAction.CASCADE)
    private Set<PhoneData> phones;

}

```

AccountService.java:
```
package org.example.pionerpixeltest.service;

import org.example.pionerpixeltest.entity.Account;

import java.math.BigDecimal;

public interface AccountService {
    void accrueInterest();

    void registerAccount(Account account);

    void transfer(Long fromUserId, Long toUserId, BigDecimal amount);

    BigDecimal getBalance(Long userId);
}

```

InitialBalanceHolder.java:
```
package org.example.pionerpixeltest.service;

import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Component
public class InitialBalanceHolder {

    private final Map<Long, BigDecimal> initialBalances = new ConcurrentHashMap<>();

    public void put(Long userId, BigDecimal balance) {
        initialBalances.putIfAbsent(userId, balance);
    }

    public BigDecimal get(Long userId) {
        return initialBalances.get(userId);
    }
}

```

TokenBlacklistService.java:
```
package org.example.pionerpixeltest.service;

import java.time.Duration;

public interface TokenBlacklistService {
    boolean isBlacklisted(String token);
    void blacklist(String token, Duration ttl);
}

```

TransferService.java:
```
package org.example.pionerpixeltest.service;

import org.springframework.stereotype.Service;

import java.math.BigDecimal;

@Service
public interface TransferService {
    void transfer(Long fromUserId, Long toUserId, BigDecimal amount);

}

```

UserFilter.java:
```
/* ============================================================
 * 3.  Фильтр поиска (immutable-record)
 * ============================================================ */
package org.example.pionerpixeltest.service;

import java.time.LocalDate;

public record UserFilter(
        LocalDate dateOfBirthAfter,
        String    namePrefix,
        String    emailExact,
        String    phoneExact) {

    public String cacheKey() {
        return  (dateOfBirthAfter != null ? "dob>" + dateOfBirthAfter : "") + "|" +
                (namePrefix       != null ? "n:" + namePrefix         : "") + "|" +
                (emailExact       != null ? "e:" + emailExact         : "") + "|" +
                (phoneExact       != null ? "p:" + phoneExact         : "");
    }
}

```

UserService.java:
```
package org.example.pionerpixeltest.service;

import jakarta.validation.Valid;
import org.example.pionerpixeltest.api.dto.RegisterRequest;
import org.example.pionerpixeltest.api.dto.UserDto;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.Set;

@Service
public interface UserService {
    Page<UserDto> search(UserFilter filter, Pageable pageable);

    UserDto getById(Long id);

    void updateEmails(Long userId, Set<String> newEmails, org.springframework.security.core.userdetails.UserDetails me);

    void updatePhones(Long userId, Set<String> newPhones, org.springframework.security.core.userdetails.UserDetails me);

    void register(@Valid RegisterRequest request);
}

```

AccountServiceImpl.java:
```
package org.example.pionerpixeltest.service.iml;

import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.pionerpixeltest.dao.AccountRepository;
import org.example.pionerpixeltest.entity.Account;
import org.example.pionerpixeltest.service.AccountService;
import org.example.pionerpixeltest.service.InitialBalanceHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.NoSuchElementException;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
@Slf4j
public class AccountServiceImpl implements AccountService {

    private final AccountRepository accountRepo;
    private final ConcurrentMap<Long, BigDecimal> initialMap = new ConcurrentHashMap<>();
    private final InitialBalanceHolder initialBalanceHolder;



    @PostConstruct
    public void cacheInitialBalances() {
        accountRepo.findAll().forEach(acc ->
                initialBalanceHolder.put(acc.getUser().getId(), acc.getBalance()));
    }

    @Override
    @Transactional
    public void accrueInterest() {
        log.info("Начисление процентов...");

        var accounts = accountRepo.findAll();

        for (Account acc : accounts) {
            Long userId = acc.getUser().getId();
            BigDecimal current = acc.getBalance();
            BigDecimal initial = initialBalanceHolder.get(userId);

            if (initial == null) continue;

            BigDecimal increased = current.multiply(BigDecimal.valueOf(1.10));
            BigDecimal limit = initial.multiply(BigDecimal.valueOf(2.07));

            if (increased.compareTo(limit) > 0) {
                acc.setBalance(limit);
            } else {
                acc.setBalance(increased);
            }
        }
    }



    @Override
    @Transactional
    public void registerAccount(Account account) {
        accountRepo.save(account);
        initialMap.putIfAbsent(
                account.getId(), account.getBalance());
    }

    @Override
    @Transactional
    public void transfer(Long fromUserId, Long toUserId, BigDecimal amount) {

        if (fromUserId.equals(toUserId)) {
            throw new IllegalArgumentException("Нельзя переводить самому себе");
        }
        if (amount == null || amount.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("Сумма должна быть положительной");
        }

        Account from = accountRepo.findByUserIdForUpdate(fromUserId)
                .orElseThrow(() -> new NoSuchElementException("Счёт отправителя не найден"));
        Account to   = accountRepo.findByUserIdForUpdate(toUserId)
                .orElseThrow(() -> new NoSuchElementException("Счёт получателя не найден"));

        if (from.getBalance().compareTo(amount) < 0) {
            throw new IllegalStateException("Недостаточно средств");
        }

        from.setBalance(from.getBalance().subtract(amount));
        to.setBalance(to.getBalance().add(amount));

    }

    @Override
    @Transactional(readOnly = true)
    public BigDecimal getBalance(Long userId) {
        return accountRepo.findByUserId(userId)
                .map(Account::getBalance)
                .orElseThrow(() -> new NoSuchElementException("Счёт не найден"));
    }

}



```

BalanceScheduler.java:
```
package org.example.pionerpixeltest.service.iml;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.pionerpixeltest.service.AccountService;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
@Slf4j
public class BalanceScheduler {
    private final AccountService accountService;

    @Scheduled(fixedRate = 30_000)
    public void accrue() {
        log.info("Запуск начисления процентов");
        accountService.accrueInterest();
    }

}

```

CaffeineTokenBlacklistService.java:
```
package org.example.pionerpixeltest.service.iml;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import org.example.pionerpixeltest.service.TokenBlacklistService;
import org.springframework.stereotype.Service;

import java.time.Duration;

@Service
public class CaffeineTokenBlacklistService implements TokenBlacklistService {

    private final Cache<String, Boolean> cache =
            Caffeine.newBuilder().expireAfterWrite(Duration.ofHours(24)).build();

    @Override public boolean isBlacklisted(String token) {
        return cache.getIfPresent(token) != null;
    }

    @Override public void blacklist(String token, Duration ttl) {
        cache.put(token, Boolean.TRUE);
        cache.policy().expireVariably().ifPresent(p -> p.put(token, Boolean.TRUE, ttl));
    }
}

```

CustomUserDetailsService.java:
```
package org.example.pionerpixeltest.service.iml;

import lombok.RequiredArgsConstructor;
import org.example.pionerpixeltest.dao.UserRepository;
import org.example.pionerpixeltest.entity.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
@RequiredArgsConstructor
public class CustomUserDetailsService implements UserDetailsService {
    private final UserRepository userRepository;

    @Override
    public UserDetails loadUserByUsername(String login) {
        return userRepository
                .findByEmails_EmailIgnoreCaseOrPhones_Phone(login, login)
                .map(user -> org.springframework.security.core.userdetails.User
                        .withUsername(user.getId().toString())
                        .password(user.getPassword())
                        .authorities("ROLE_USER")
                        .build())
                .orElseThrow(() -> new UsernameNotFoundException("User not found: " + login));
    }

    private UserDetails toPrincipal(User user) {    // ①
        return org.springframework.security.core.userdetails.User
                .withUsername(user.getId().toString())
                .password(user.getPassword())
                .authorities("ROLE_USER")
                .build();
    }


}

```

NoopTokenBlacklistService.java:
```
package org.example.pionerpixeltest.service.iml;

import org.example.pionerpixeltest.service.TokenBlacklistService;
import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Service;

import java.time.Duration;

@Service
@Primary
public class NoopTokenBlacklistService implements TokenBlacklistService {
    @Override public boolean isBlacklisted(String token) { return false; }
    @Override public void blacklist(String token, Duration ttl) {}
}


```

TransferServiceImpl.java:
```
package org.example.pionerpixeltest.service.iml;

import lombok.RequiredArgsConstructor;
import org.example.pionerpixeltest.service.AccountService;
import org.example.pionerpixeltest.service.TransferService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;

@Service
@RequiredArgsConstructor
public class TransferServiceImpl implements TransferService {

    private final AccountService accountService;

    @Override
    @Transactional
    public void transfer(Long fromUserId, Long toUserId, BigDecimal amount) {
        accountService.transfer(fromUserId, toUserId, amount);
    }
}

```

UserServiceImpl.java:
```
package org.example.pionerpixeltest.service.iml;

import lombok.RequiredArgsConstructor;
import org.example.pionerpixeltest.api.dto.RegisterRequest;
import org.example.pionerpixeltest.api.dto.UserDto;
import org.example.pionerpixeltest.api.mapper.UserMapper;
import org.example.pionerpixeltest.dao.AccountRepository;
import org.example.pionerpixeltest.dao.EmailDataRepository;
import org.example.pionerpixeltest.dao.PhoneDataRepository;
import org.example.pionerpixeltest.dao.UserRepository;
import org.example.pionerpixeltest.entity.Account;
import org.example.pionerpixeltest.entity.EmailData;
import org.example.pionerpixeltest.entity.PhoneData;
import org.example.pionerpixeltest.entity.User;
import org.example.pionerpixeltest.service.AccountService;
import org.example.pionerpixeltest.service.UserFilter;
import org.example.pionerpixeltest.service.UserService;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.Caching;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@CacheConfig(cacheNames = "users")
public class UserServiceImpl implements UserService {

    private final UserRepository userRepo;
    private final EmailDataRepository emailRepo;
    private final PhoneDataRepository phoneRepo;
    private final UserMapper mapper;
    private final PasswordEncoder passwordEncoder;
    private final AccountService accountService;
    private final AccountRepository accountRepo;

    @Override
    @Cacheable(key = "'filter:' + #filter.cacheKey() + ':' + #pageable.pageNumber")
    @Transactional(readOnly = true)
    public Page<UserDto> search(UserFilter filter, Pageable pageable) {

        Page<User> page = userRepo.findAll((root, q, cb) -> {
            var p = cb.conjunction();

            if (filter.dateOfBirthAfter() != null) {
                p = cb.and(p,
                        cb.greaterThan(root.get("dateOfBirth"),
                                filter.dateOfBirthAfter()));
            }
            if (filter.namePrefix() != null) {
                p = cb.and(p,
                        cb.like(cb.lower(root.get("name")),
                                filter.namePrefix().toLowerCase() + "%"));
            }
            if (filter.phoneExact() != null) {
                p = cb.and(p,
                        cb.equal(root.join("phones").get("phone"),
                                filter.phoneExact()));
            }
            if (filter.emailExact() != null) {
                p = cb.and(p,
                        cb.equal(root.join("emails").get("email"),
                                filter.emailExact().toLowerCase()));
            }
            return p;
        }, pageable);

        return page.map(mapper::toDto);
    }

    @Override
    @Cacheable(key = "'id:' + #id")
    @Transactional(readOnly = true)
    public UserDto getById(Long id) {
        return userRepo.findById(id)
                .map(mapper::toDto)
                .orElseThrow(() -> new NoSuchElementException("Пользователь не найден"));
    }


    @Override
    @Caching(evict = { @CacheEvict(key = "'id:' + #userId"),
            @CacheEvict(key = "'filter:*'", allEntries = true) })
    @Transactional
    public void updateEmails(Long userId, Set<String> newEmails,
                             UserDetails me) {

        checkSelfEdit(userId, me);

        User user = userRepo.findById(userId)
                .orElseThrow(() -> new NoSuchElementException("Пользователь не найден"));

        Set<String> existing = user.getEmails().stream()
                .map(EmailData::getEmail)
                .collect(Collectors.toSet());

        newEmails.stream()
                .filter(e -> !existing.contains(e))
                .forEach(e -> addEmail(userId, e));

        existing.stream()
                .filter(e -> !newEmails.contains(e))
                .forEach(e -> {
                    EmailData entity = emailRepo.findByEmailIgnoreCase(e)
                            .orElseThrow();
                    deleteEmail(userId, entity.getId());
                });
    }


    @Override
    @Caching(evict = { @CacheEvict(key = "'id:' + #userId"),
            @CacheEvict(key = "'filter:*'", allEntries = true) })
    @Transactional
    public void updatePhones(Long userId, Set<String> newPhones,
                             UserDetails me) {

        checkSelfEdit(userId, me);

        User user = userRepo.findById(userId)
                .orElseThrow(() -> new NoSuchElementException("Пользователь не найден"));

        Set<String> existing = user.getPhones().stream()
                .map(PhoneData::getPhone)
                .collect(Collectors.toSet());

        newPhones.stream()
                .filter(p -> !existing.contains(p))
                .forEach(p -> addPhone(userId, p));

        existing.stream()
                .filter(p -> !newPhones.contains(p))
                .forEach(p -> {
                    PhoneData entity = phoneRepo.findByPhone(p).orElseThrow();
                    deletePhone(userId, entity.getId());
                });
    }

    @Override
    @Transactional
    public void register(RegisterRequest rq) {

        if (emailRepo.existsByEmailIgnoreCaseIn(rq.getEmails()))
            throw new IllegalArgumentException("E-mail уже занят");
        if (phoneRepo.existsByPhoneIn(rq.getPhones()))
            throw new IllegalArgumentException("Телефон уже занят");

        User user = new User();
        user.setName(rq.getName());
        user.setPassword(passwordEncoder.encode(rq.getPassword()));
        user.setDateOfBirth(rq.getDateOfBirth());

        Set<EmailData> emails = rq.getEmails().stream()
                .map(e -> { EmailData ed = new EmailData();
                    ed.setEmail(e.toLowerCase()); ed.setUser(user); return ed; })
                .collect(Collectors.toSet());

        Set<PhoneData> phones = rq.getPhones().stream()
                .map(p -> { PhoneData pd = new PhoneData();
                    pd.setPhone(p); pd.setUser(user); return pd; })
                .collect(Collectors.toSet());

        user.setEmails(emails);
        user.setPhones(phones);

        Account acc = new Account();
        acc.setUser(user);
        acc.setBalance(rq.getInitialBalance());
        user.setAccount(acc);

        userRepo.save(user);

        accountService.registerAccount(acc);
    }

    private static void checkSelfEdit(Long userId, UserDetails me) {
        Long meId = Long.parseLong(me.getUsername());
        if (!meId.equals(userId)) {
            throw new IllegalStateException("Нельзя менять данные другого пользователя");
        }
    }

    @Caching(evict = { @CacheEvict(key = "'id:' + #userId"),
            @CacheEvict(key = "'filter:*'", allEntries = true) })
    @Transactional
    public void addEmail(Long userId, String email) {
        if (emailRepo.existsByEmailIgnoreCase(email)) {
            throw new IllegalArgumentException("E-mail уже занят");
        }
        User user = userRepo.getReferenceById(userId);
        EmailData data = new EmailData();
        data.setEmail(email.toLowerCase());
        data.setUser(user);
        emailRepo.save(data);
    }

    @Caching(evict = { @CacheEvict(key = "'id:' + #userId"),
            @CacheEvict(key = "'filter:*'", allEntries = true) })
    @Transactional
    public void deleteEmail(Long userId, Long emailId) {
        EmailData data = emailRepo.findById(emailId)
                .orElseThrow(() -> new NoSuchElementException("E-mail не найден"));
        if (!data.getUser().getId().equals(userId)) {
            throw new IllegalStateException("Чужие e-mail’ы удалять нельзя");
        }
        if (data.getUser().getEmails().size() == 1) {
            throw new IllegalStateException("Должен остаться минимум один e-mail");
        }
        emailRepo.delete(data);
    }

    @Caching(evict = { @CacheEvict(key = "'id:' + #userId"),
            @CacheEvict(key = "'filter:*'", allEntries = true) })
    @Transactional
    public void addPhone(Long userId, String phone) {
        if (phoneRepo.existsByPhone(phone)) {
            throw new IllegalArgumentException("Телефон уже занят");
        }
        User user = userRepo.getReferenceById(userId);
        PhoneData p = new PhoneData();
        p.setPhone(phone);
        p.setUser(user);
        phoneRepo.save(p);
    }

    @Caching(evict = { @CacheEvict(key = "'id:' + #userId"),
            @CacheEvict(key = "'filter:*'", allEntries = true) })
    @Transactional
    public void deletePhone(Long userId, Long phoneId) {
        PhoneData p = phoneRepo.findById(phoneId)
                .orElseThrow(() -> new NoSuchElementException("Телефон не найден"));
        if (!p.getUser().getId().equals(userId)) {
            throw new IllegalStateException("Чужие телефоны удалять нельзя");
        }
        if (p.getUser().getPhones().size() == 1) {
            throw new IllegalStateException("Должен остаться минимум один телефон");
        }
        phoneRepo.delete(p);
    }

}

```

application.properties:
```
spring.application.name=PionerPixelTest
security.jwt.secret=change_me_to_a_long_random_string_32chars_min


```

application.yaml:
```
spring:
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/${POSTGRES_DB:user_service}
    username: ${POSTGRES_USER:demo}
    password: ${POSTGRES_PASSWORD:demo}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        format_sql: true
    open-in-view: false

  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration

server:
  port: 8080

jwt:
  secret: ${JWT_SECRET:change_me}
  expiration-ms: 3600000
  security:
    jwt:
      secret: "change_me_to_a_long_random_string_32chars_min"

```

V1_next__account_constraints.sql:
```

```

V1__create_tables.sql:
```
CREATE TABLE IF NOT EXISTS "user"
(
    id            BIGSERIAL PRIMARY KEY,
    name          VARCHAR(500) NOT NULL,
    date_of_birth DATE         NOT NULL,
    password      VARCHAR(500) NOT NULL
    );

CREATE TABLE IF NOT EXISTS account
(
    id      BIGSERIAL PRIMARY KEY,
    user_id BIGINT      NOT NULL UNIQUE,
    balance NUMERIC(19, 2) DEFAULT 0 CHECK (balance >= 0),
    CONSTRAINT fk_account_user FOREIGN KEY (user_id) REFERENCES "user"(id)
    );

CREATE TABLE IF NOT EXISTS email_data
(
    id      BIGSERIAL PRIMARY KEY,
    user_id BIGINT      NOT NULL,
    email   VARCHAR(200) NOT NULL UNIQUE,
    CONSTRAINT fk_email_user FOREIGN KEY (user_id) REFERENCES "user"(id)
    );

CREATE TABLE IF NOT EXISTS phone_data
(
    id      BIGSERIAL PRIMARY KEY,
    user_id BIGINT      NOT NULL,
    phone   VARCHAR(13)  NOT NULL UNIQUE,
    CONSTRAINT fk_phone_user FOREIGN KEY (user_id) REFERENCES "user"(id)
    );
```

V2__insert_default_users.sql:
```
INSERT INTO "user" (id, name, date_of_birth, password)
VALUES (100, 'Alice', '1990-01-01', '$2a$10$3yBt5Lkm7ZmFxA7cVQmkeu9Cj/WakzOHuF7zk9zglT7CO51u6S7uS'); -- пароль: 123

INSERT INTO "user" (id, name, date_of_birth, password)
VALUES (101, 'Bob', '1985-06-15', '$2a$10$3yBt5Lkm7ZmFxA7cVQmkeu9Cj/WakzOHuF7zk9zglT7CO51u6S7uS'); -- пароль: 123

INSERT INTO email_data (user_id, email) VALUES (100, 'alice@example.com');
INSERT INTO email_data (user_id, email) VALUES (101, 'bob@example.com');

INSERT INTO phone_data (user_id, phone) VALUES (100, '+10000000000');
INSERT INTO phone_data (user_id, phone) VALUES (101, '+20000000000');

INSERT INTO account (user_id, balance) VALUES (100, 1000);
INSERT INTO account (user_id, balance) VALUES (101, 2000);

```

PionerPixelTestApplicationTests.java:
```
package org.example.pionerpixeltest;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class PionerPixelTestApplicationTests {

    @Test
    void contextLoads() {
    }

}

```

AccountServiceTest.java:
```
package org.example.pionerpixeltest.service;

import org.example.pionerpixeltest.dao.AccountRepository;
import org.example.pionerpixeltest.entity.Account;
import org.example.pionerpixeltest.service.iml.AccountServiceImpl;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.math.BigDecimal;
import java.util.NoSuchElementException;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class AccountServiceTest {
    @Mock
    AccountRepository accountRepository;

    @InjectMocks
    AccountServiceImpl accountService;

    @Test
    void transfer_shouldTransferMoneySuccessfully() {
        Account from = new Account();
        from.setId(1L);
        from.setBalance(new BigDecimal("200"));

        Account to = new Account();
        to.setId(2L);
        to.setBalance(new BigDecimal("50"));

        when(accountRepository.findByUserIdForUpdate(1L)).thenReturn(Optional.of(from));
        when(accountRepository.findByUserIdForUpdate(2L)).thenReturn(Optional.of(to));

        accountService.transfer(1L, 2L, new BigDecimal("100"));

        assertEquals(new BigDecimal("100"), from.getBalance());
        assertEquals(new BigDecimal("150"), to.getBalance());
    }

    @Test
    void transfer_shouldThrowIfSenderNotFound() {
        when(accountRepository.findByUserIdForUpdate(1L)).thenReturn(Optional.empty());

        NoSuchElementException ex = assertThrows(NoSuchElementException.class,
                () -> accountService.transfer(1L, 2L, new BigDecimal("100")));

        assertEquals("Счёт отправителя не найден", ex.getMessage());
    }

    @Test
    void transfer_shouldThrowIfRecipientNotFound() {
        Account from = new Account();
        from.setId(1L);
        from.setBalance(new BigDecimal("200"));

        when(accountRepository.findByUserIdForUpdate(1L)).thenReturn(Optional.of(from));
        when(accountRepository.findByUserIdForUpdate(2L)).thenReturn(Optional.empty());

        NoSuchElementException ex = assertThrows(NoSuchElementException.class,
                () -> accountService.transfer(1L, 2L, new BigDecimal("100")));

        assertEquals("Счёт получателя не найден", ex.getMessage());
    }

    @Test
    void transfer_shouldThrowIfInsufficientBalance() {
        Account from = new Account();
        from.setId(1L);
        from.setBalance(new BigDecimal("50"));

        Account to = new Account();
        to.setId(2L);
        to.setBalance(new BigDecimal("50"));

        when(accountRepository.findByUserIdForUpdate(1L)).thenReturn(Optional.of(from));
        when(accountRepository.findByUserIdForUpdate(2L)).thenReturn(Optional.of(to));

        IllegalStateException ex = assertThrows(IllegalStateException.class,
                () -> accountService.transfer(1L, 2L, new BigDecimal("100")));

        assertEquals("Недостаточно средств", ex.getMessage());
    }

    @Test
    void transfer_shouldThrowIfTransferToSelf() {
        IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,
                () -> accountService.transfer(1L, 1L, new BigDecimal("100")));

        assertEquals("Нельзя переводить самому себе", ex.getMessage());
    }

    @Test
    void transfer_shouldThrowIfAmountIsZero() {
        IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,
                () -> accountService.transfer(1L, 2L, BigDecimal.ZERO));

        assertEquals("Сумма должна быть положительной", ex.getMessage());
    }

    @Test
    void transfer_shouldThrowIfAmountIsNegative() {
        IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,
                () -> accountService.transfer(1L, 2L, new BigDecimal("-50")));

        assertEquals("Сумма должна быть положительной", ex.getMessage());
    }

}

```

TestSecurityConfig.java:
```
package org.example.pionerpixeltest.service;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.List;

@TestConfiguration
class TestSecurityConfig {

    @Bean
    public OncePerRequestFilter jwtAuthFilter() {
        return new OncePerRequestFilter() {
            @Override
            protected void doFilterInternal(HttpServletRequest req,
                                            HttpServletResponse res,
                                            FilterChain chain)
                    throws ServletException, IOException {

                UsernamePasswordAuthenticationToken auth =
                        new UsernamePasswordAuthenticationToken(1L, null, List.of());
                SecurityContextHolder.getContext().setAuthentication(auth);
                chain.doFilter(req, res);
            }
        };
    }
}


```

TransferControllerIntegrationTest.java:
```
package org.example.pionerpixeltest.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.pionerpixeltest.api.dto.TransferRequest;
import org.example.pionerpixeltest.dao.AccountRepository;
import org.example.pionerpixeltest.dao.EmailDataRepository;
import org.example.pionerpixeltest.dao.PhoneDataRepository;
import org.example.pionerpixeltest.dao.UserRepository;
import org.example.pionerpixeltest.entity.Account;
import org.example.pionerpixeltest.entity.EmailData;
import org.example.pionerpixeltest.entity.User;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.TestingAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.transaction.annotation.Transactional;
import org.testcontainers.containers.PostgreSQLContainer;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.HashSet;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc(addFilters = false)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@Transactional
class TransferControllerIntegrationTest {

    static PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:15")
            .withDatabaseName("test-db")
            .withUsername("user")
            .withPassword("pass");

    static {
        postgres.start();
    }

    @DynamicPropertySource
    static void overrideProps(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", postgres::getJdbcUrl);
        registry.add("spring.datasource.username", postgres::getUsername);
        registry.add("spring.datasource.password", postgres::getPassword);
    }

    @Autowired
    private EmailDataRepository emailDataRepository;
    @Autowired
    private PhoneDataRepository phoneDataRepository;
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private ObjectMapper mapper;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private AccountRepository accountRepository;

    private Long fromUserId;
    private Long toUserId;


    @BeforeEach
    void initSecurityContext() {
        org.springframework.security.core.userdetails.User springUser =
                new org.springframework.security.core.userdetails.User(
                        "1", "pass", List.of(new SimpleGrantedAuthority("ROLE_USER")));
        TestingAuthenticationToken auth = new TestingAuthenticationToken(springUser, null, springUser.getAuthorities());
        SecurityContextHolder.getContext().setAuthentication(auth);
    }

    @BeforeEach
    void initData() {
        emailDataRepository.deleteAll();
        phoneDataRepository.deleteAll();
        accountRepository.deleteAll();
        userRepository.deleteAll();

        User user1 = new User();
        user1.setName("Alice");
        user1.setPassword("pass");
        user1.setDateOfBirth(LocalDate.of(1990, 1, 1));

        EmailData email1 = new EmailData();
        email1.setEmail("123");

        user1.setEmails(new HashSet<>());
        user1.getEmails().add(email1);
        email1.setUser(user1);

        User user2 = new User();
        user2.setName("Bob");
        user2.setPassword("pass");
        user2.setDateOfBirth(LocalDate.of(1985, 6, 15));

        EmailData email2 = new EmailData();
        email2.setEmail("321");

        user2.setEmails(new HashSet<>());
        user2.getEmails().add(email2);
        email2.setUser(user2);

        user1 = userRepository.save(user1);
        user2 = userRepository.save(user2);

        accountRepository.save(new Account(null, user1, new BigDecimal("300")));
        accountRepository.save(new Account(null, user2, new BigDecimal("100")));

        fromUserId = user1.getId();
        toUserId = user2.getId();
    }

    @Test
    void shouldTransferMoney() throws Exception {
        TransferRequest request = TransferRequest.builder()
                .toUserId(toUserId)
                .amount(new BigDecimal("50"))
                .build();

        mockMvc.perform(post("/api/transfer/transfer")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsString(request)))
                .andExpect(status().isNoContent());

        assertBalances();
    }

    private void assertBalances() {
        BigDecimal fromBalance = accountRepository.findByUserId(fromUserId).orElseThrow().getBalance();
        BigDecimal toBalance   = accountRepository.findByUserId(toUserId).orElseThrow().getBalance();

        assertThat(fromBalance).isEqualByComparingTo("250");
        assertThat(toBalance).isEqualByComparingTo("150");
    }

}


```
